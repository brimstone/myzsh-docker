#!/usr/bin/zsh
function _deps(){
	app="docker"
	isosx && app="docker-machine"

	$(hash $app 2>/dev/null) || $(myzsh error "Couldn't find application ${app}" && return 1)
}

function docker() {
	local verb="$1"
	local mod="$2"

	case "$verb" in
	clean)
		case "$mod" in
		containers)
			command docker rm -v $(command docker ps -a -q -f status=exited) || return 0
		;;
		env)
			unset DOCKER_HOST
			unset DOCKER_CERT_PATH
			unset DOCKER_TLS_VERIFY
		;;
		images)
			if [ -z "$3" ]; then
				command docker rmi $(command docker images -f "dangling=true" -q) || return 0
			else
				command docker rmi $(command docker images | awk '/'$3'/ {print $3}') 2>/dev/null || return 0
			fi
		;;
		*)
			$0 clean containers
			$0 clean images
		;;
		esac
	;;
	down)
		warnmaconly && docker-machine stop default
	;;
	dev)
		shift
		command docker run -t -i -v "$PWD:/docker" --workdir=/docker "$@"
	;;
        enter)
		if [ -z "$3" ]; then
			command docker exec -t -i "$mod" "/bin/bash"
		else
			command docker exec -t -i "$mod" "$3"
		fi
	;;
        env)
		if isosx; then
                  eval "$(docker-machine env default)"
                  echo "boot2docker vm: $(docker-machine inspect -f '{{.Driver.IPAddress}}' default)"
                fi
        ;;
	help)
		shift
		if [ -z "$1" ]; then
		command docker help 2>&1 | sed '/wait/a \
\
    myzsh provided commands:\
    clean     Clean up images or containers, or both\
    describe  Describe how a container was started\
    dev       Run /bin/bash in an image with $PWD mapped in\
    down      Stop boot2docker vm with docker-machine\
    enter     Run interactive prompt with /bin/bash by default, or passed in command\
    env       Setup boot2docker env variables\
    init      Setup boot2docker with docker-machine\
    ip        Get the IP of a container\
    nuke      Kill all running containers\
    socket    Run a proxy socket on /tmp/proxysocket.sock\
    shove     Use save and load to push an image into another daemon over ssh\
    up        Start boot2docker vm with docker-machine\
    upgrade   Upgrade boot2docker vm to latest version' >&2
		fi
	;;
	init)
		if warnmaconly; then
                        docker-machine ls | grep -q "default"
                        if [ $? ]; then
                          docker-machine create --driver virtualbox default
                          $0 env
                        else
                          echo "default machine already created, please run 'docker start'"
                        fi
		fi
	;;
	ip)
		shift
		command docker inspect -f '{{.NetworkSettings.IPAddress}}' "$1"
	;;
	socket)
		sudo socat -t100 -v UNIX-LISTEN:/tmp/proxysocket.sock,mode=777,reuseaddr,fork UNIX-CONNECT:/var/run/docker.sock
	;;
	describe)
		shift
		container="$1"
		shift
		command docker inspect -f "docker run $@ --name {{.Name}}{{range \$index, \$port := .NetworkSettings.Ports}}
{{range \$port}}
 -p {{.HostPort}}:{{\$index}}
{{end}}
{{end}}
{{range .HostConfig.VolumesFrom}}
 --volumes-from {{.}}
{{end}}
{{range .Config.Env}}
 -e {{.}}
{{end}}
{{range \$host, \$guest := .HostConfig.Binds}}
 -v {{\$guest}}
{{end}}
 {{.Config.Image}}
{{range .Args}}
 {{.}}
{{end}}" "$container" | tr -d '\n' | sed -r 's/ -e (HOME|PATH)=[^ ]*//g'
	;;
	nuke)
		$0 kill $(command docker ps -a -q)
	;;
	shove)
		shift
		size=$(command docker save "$1" | wc -c)
		echo "size: $size"
		set -x
		command docker save "$1" | bzip2 -9 | ssh "$2" 'bzcat | docker load'
		set +x
	;;
	up)
		if warnmaconly; then
                        docker-machine ls | grep -q "default"
                        if [ $? ]; then
			  docker-machine start default
                          $0 env
                        else
                          echo "default machine isn't initalized, please run 'docker init'"
                        fi
		fi
	;;
	upgrade)
		if warnmaconly; then
			after=""
			[ "$(docker-machine status default 3>&1)" = "running" ] && after="up"
			$0 down
			docker-machine upgrade default
			$0 $after 2>/dev/null
		fi
	;;
	*)
		command docker "$@"
	;;
	esac
}

warnmaconly(){
	if ! isosx; then
		myzsh error "Only available under OS X" && return 1
		return 1
	else
		return 0
	fi
}

docker images -f 'label=FUNCTION_NAME' -q | while read -r cid; do
	alias $(docker inspect -f '{{.Config.Labels.FUNCTION_NAME}}' $cid)="docker run --rm -v \$PWD:\$PWD -w \$PWD -u \$UID:\$GID -i $cid"
done
# vim: filetype=zsh noexpandtab
